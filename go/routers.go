/*
 * Power control block
 *
 * This API was created to monitor states of Power Control Block and send some commands to it.
 *
 * API version: 1.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

var HttpReqChan chan uint8 = make(chan uint8)
var FlagWaitResp bool = false

type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
}

type Routes []Route

func NewRouter() *mux.Router {
	router := mux.NewRouter().StrictSlash(true)
	for _, route := range routes {
		var handler http.Handler
		handler = route.HandlerFunc
		handler = Logger(handler, route.Name)

		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
	}

	return router
}

func Index(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Hello World!")
}

var routes = Routes{
	Route{
		"Index",
		"GET",
		"/",
		Index,
	},

	Route{
		"SetButtonsLock",
		strings.ToUpper("Put"),
		"/buttons/lock",
		SetButtonsLock,
	},

	Route{
		"GetFileConfig",
		strings.ToUpper("Get"),
		"/files/config",
		GetFileConfig,
	},

	Route{
		"GetFilePhones",
		strings.ToUpper("Get"),
		"/files/phones",
		GetFilePhones,
	},

	Route{
		"SetFileConfig",
		strings.ToUpper("Put"),
		"/files/config",
		SetFileConfig,
	},

	Route{
		"SetFileNPhones",
		strings.ToUpper("Put"),
		"/files/phones",
		SetFileNPhones,
	},

	Route{
		"GetModemConnByID",
		strings.ToUpper("Get"),
		"/modem/conn",
		GetModemConnByID,
	},

	Route{
		"GetModemFlyByID",
		strings.ToUpper("Get"),
		"/modem/state/flymode",
		GetModemFlyByID,
	},

	Route{
		"GetModemImeiByID",
		strings.ToUpper("Get"),
		"/modem/state/imei",
		GetModemImeiByID,
	},

	Route{
		"GetModemSimByID",
		strings.ToUpper("Get"),
		"/modem/state/sim",
		GetModemSimByID,
	},

	Route{
		"GetModemStByID",
		strings.ToUpper("Get"),
		"/modem/state",
		GetModemStByID,
	},

	Route{
		"SetModemFlyByID",
		strings.ToUpper("Put"),
		"/modem/state/flymode",
		SetModemFlyByID,
	},

	Route{
		"SetModemImeiByID",
		strings.ToUpper("Put"),
		"/modem/state/imei",
		SetModemImeiByID,
	},

	Route{
		"SetModemSimByID",
		strings.ToUpper("Put"),
		"/modem/state/sim",
		SetModemSimByID,
	},

	Route{
		"GetPwrBat",
		strings.ToUpper("Get"),
		"/power/battery",
		GetPwrBat,
	},

	Route{
		"GetPwrCfg",
		strings.ToUpper("Get"),
		"/power",
		GetPwrCfg,
	},

	Route{
		"GetPwrModemByID",
		strings.ToUpper("Get"),
		"/power/modem",
		GetPwrModemByID,
	},

	Route{
		"GetPwrPC",
		strings.ToUpper("Get"),
		"/power/pc",
		GetPwrPC,
	},

	Route{
		"GetPwrRelayByID",
		strings.ToUpper("Get"),
		"/power/relay",
		GetPwrRelayByID,
	},

	Route{
		"GetPwrWiFi",
		strings.ToUpper("Get"),
		"/power/wifi",
		GetPwrWiFi,
	},

	Route{
		"SetPwrCfg",
		strings.ToUpper("Put"),
		"/power",
		SetPwrCfg,
	},

	Route{
		"SetPwrModemByID",
		strings.ToUpper("Put"),
		"/power/modem",
		SetPwrModemByID,
	},

	Route{
		"SetPwrPC",
		strings.ToUpper("Put"),
		"/power/pc",
		SetPwrPC,
	},

	Route{
		"SetPwrRelayByID",
		strings.ToUpper("Put"),
		"/power/relay",
		SetPwrRelayByID,
	},

	Route{
		"SetPwrWiFi",
		strings.ToUpper("Put"),
		"/power/wifi",
		SetPwrWiFi,
	},

	Route{
		"SetWaitmode",
		strings.ToUpper("Put"),
		"/power/waitmode",
		SetWaitmode,
	},

	Route{
		"GetSmsUnknown",
		strings.ToUpper("Get"),
		"/sms/unknown",
		GetSmsUnknown,
	},

	Route{
		"SetSendSms",
		strings.ToUpper("Put"),
		"/sms/send",
		SetSendSms,
	},

	Route{
		"SetSmsLock",
		strings.ToUpper("Put"),
		"/sms/lock",
		SetSmsLock,
	},
}
