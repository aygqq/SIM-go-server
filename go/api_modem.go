/*
 * Power control block
 *
 * This API was created to monitor states of Power Control Block and send some commands to it.
 *
 * API version: 1.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"encoding/json"
	"fmt"
	"net/http"

	"../control"
)

func GetModemConnByID(w http.ResponseWriter, r *http.Request) {
	var res RespModemconnResults
	var resp RespModemconn
	resp.Results = &res

	idx, _, err := parseNumberState(r)

	if err == 0 {
		control.SendShort(control.CMD_REQ_CONN_INFO, idx)
		status, ret := waitForResponce(1)

		if ret == true {
			res.Number = idx + 1
			res.Status = control.ConnSt[idx].Status
			res.OperID = control.ConnSt[idx].OperID
			res.CellID = control.ConnSt[idx].CellID
			res.Rssi = control.ConnSt[idx].Rssi
			resp.Results = &res
		}
		resp.Status = status
	} else {
		resp.Status = "INVALID_REQUEST"
	}

	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)

	str, _ := json.Marshal(resp)
	fmt.Fprintf(w, string(str))
}

func GetModemFlyByID(w http.ResponseWriter, r *http.Request) {
	var res RespStateResults
	var resp RespState

	idx, _, err := parseNumberState(r)

	if err == 0 {
		control.SendShort(control.CMD_REQ_MODEM_INFO, idx)
		status, ret := waitForResponce(1)

		if ret == true {
			res.Number = idx + 1
			res.State = control.ModemSt[idx].Flymode
			resp.Results = &res
		}
		resp.Status = status
	} else {
		resp.Status = "INVALID_REQUEST"
	}

	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)

	str, _ := json.Marshal(resp)
	fmt.Fprintf(w, string(str))
}

func GetModemImeiByID(w http.ResponseWriter, r *http.Request) {
	var res RespImeiResults
	var resp RespImei

	idx, _, err := parseNumberState(r)

	if err == 0 {
		control.SendShort(control.CMD_REQ_MODEM_INFO, idx)
		status, ret := waitForResponce(1)

		if ret == true {
			res.Number = idx + 1
			res.Imei = control.ModemSt[idx].Imei
			resp.Results = &res
		}
		resp.Status = status
	} else {
		resp.Status = "INVALID_REQUEST"
	}

	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)

	str, _ := json.Marshal(resp)
	fmt.Fprintf(w, string(str))
}

func GetModemSimByID(w http.ResponseWriter, r *http.Request) {
	var res RespSimResults
	var resp RespSim

	idx, _, err := parseNumberState(r)

	if err == 0 {
		control.SendShort(control.CMD_REQ_MODEM_INFO, idx)
		status, ret := waitForResponce(1)

		if ret == true {
			res.Number = idx + 1
			res.SimNum = control.ModemSt[idx].SimNum
			resp.Results = &res
		}
		resp.Status = status
	} else {
		resp.Status = "INVALID_REQUEST"
	}

	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)

	str, _ := json.Marshal(resp)
	fmt.Fprintf(w, string(str))
}

func GetModemStByID(w http.ResponseWriter, r *http.Request) {
	var res RespModemstateResults
	var resp RespModemstate

	idx, _, err := parseNumberState(r)

	if err == 0 {
		control.SendShort(control.CMD_REQ_MODEM_INFO, idx)
		status, ret := waitForResponce(1)

		if ret == true {
			res.Number = idx + 1
			res.Flymode = control.ModemSt[idx].Flymode
			res.Imei = control.ModemSt[idx].Imei
			res.Iccid = control.ModemSt[idx].Iccid
			res.SimNum = control.ModemSt[idx].SimNum
			resp.Results = &res
		}
		resp.Status = status
	} else {
		resp.Status = "INVALID_REQUEST"
	}

	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)

	str, _ := json.Marshal(resp)
	fmt.Fprintf(w, string(str))
}

func SetModemFlyByID(w http.ResponseWriter, r *http.Request) {
	var res RespStateResults
	var resp RespState

	idx, state, err := parseNumberState(r)

	if err == 0 {
		control.SendFlightmode(idx, state)
		status, ret := waitForResponce(1)
		if ret == true {
			res.Number = idx + 1
			res.State = state
			resp.Results = &res
			control.ModemSt[idx].Flymode = state
		}
		resp.Status = status
	} else {
		resp.Status = "INVALID_REQUEST"
	}

	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)

	str, _ := json.Marshal(resp)
	fmt.Fprintf(w, string(str))
}

func SetModemImeiByID(w http.ResponseWriter, r *http.Request) {
	var res RespImeiResults
	var resp RespImei

	idx, imei, err := parseNumberImei(r)

	if err == 0 {
		control.SendSetImei(idx, imei)
		status, ret := waitForResponce(1)
		if ret == true {
			res.Number = idx + 1
			res.Imei = imei
			resp.Results = &res
			control.ModemSt[idx].Imei = imei
		}
		resp.Status = status
	} else {
		resp.Status = "INVALID_REQUEST"
	}

	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)

	str, _ := json.Marshal(resp)
	fmt.Fprintf(w, string(str))
}

func SetModemSimByID(w http.ResponseWriter, r *http.Request) {
	var res RespSimResults
	var resp RespSim

	idx, num, err := parseNumberSim(r)

	if err == 0 {
		control.SendDoubleByte(control.CMD_CHANGE_SIM, idx, num)
		status, ret := waitForResponce(1)
		if ret == true {
			res.Number = idx + 1
			res.SimNum = num
			resp.Results = &res
			control.ModemSt[idx].SimNum = num
		}
		resp.Status = status
	} else {
		resp.Status = "INVALID_REQUEST"
	}

	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)

	str, _ := json.Marshal(resp)
	fmt.Fprintf(w, string(str))
}
