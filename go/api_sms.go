/*
 * Power control block
 *
 * This API was created to monitor states of Power Control Block and send some commands to it.
 *
 * API version: 1.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"

	"../control"
)

func GetSmsNumbers(w http.ResponseWriter, r *http.Request) {
	var resp RespNumbers

	control.SendCommand(control.CMD_REQ_PHONES, true)
	status, ret := waitForResponce(1)
	if ret == true {
		control.GetPhonesReq(&resp.Results)
		resp.Status = status
	}

	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)

	str, _ := json.Marshal(resp)
	fmt.Fprintf(w, string(str))
}

func GetSmsUnknown(w http.ResponseWriter, r *http.Request) {
	var res RespSmsResults
	var resp RespSms

	resp.Status = "OK"

	if control.SmsList.Len() > 0 {
		e := control.SmsList.Front()
		sms, ok := e.Value.(*control.SmsMessage)
		if !ok {
			resp.Status = "EXECUTE_ERROR"
		} else {
			res.Number = sms.ModemNum
			res.Phone = sms.Phone
			res.Message = sms.Message
			resp.Results = &res

			control.SmsList.Remove(e)
		}
	}

	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)

	str, _ := json.Marshal(resp)
	fmt.Fprintf(w, string(str))
}

func SetSmsNumbers(w http.ResponseWriter, r *http.Request) {
	var resp RespNumbers

	body, err := ioutil.ReadAll(r.Body)
	if err != nil {
		log.Printf("Error reading body: %v", err)
	}
	//str := string(body)
	//log.Printf("Request body is %s\n", str)

	err = json.Unmarshal(body, &resp.Results)

	ph := control.ParsePhones(&resp.Results)
	err = control.ProcSetPhones(ph)
	if err != nil {
		resp.Status = "EXECUTE_ERROR"
	} else {
		control.WritePhones(ph)
		resp.Status = "OK"
	}

	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)

	str, _ := json.Marshal(resp)
	fmt.Fprintf(w, string(str))
}

func SetSendSms(w http.ResponseWriter, r *http.Request) {
	var res RespSmsResults
	var resp RespSms

	idx, phone, sms, err := parseNumberPhoneSms(r)

	var smsMes control.SmsMessage

	if err == 0 {
		smsMes.ModemNum = idx
		smsMes.Phone = phone
		smsMes.Message = sms
		control.SendSmsMessage(&smsMes)
		status, ret := waitForResponce(21)
		if ret == true {
			res.Number = idx
			res.Phone = phone
			res.Message = sms
			resp.Results = &res
		}
		resp.Status = status
	} else {
		resp.Status = "INVALID_REQUEST"
	}

	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)

	str, _ := json.Marshal(resp)
	fmt.Fprintf(w, string(str))
}

func SetSmsLock(w http.ResponseWriter, r *http.Request) {
	var res RespStateResults
	var resp RespState

	_, state, err := parseNumberState(r)

	if err == 0 {
		if state == true {
			control.SendShort(control.CMD_LOCK, 1)
		} else {
			control.SendShort(control.CMD_UNLOCK, 1)
		}
		status, ret := waitForResponce(1)
		if ret == true {
			res.Number = 0
			res.State = state
			resp.Results = &res
			control.SystemSt.SmsLock = state
		}
		resp.Status = status
	} else {
		resp.Status = "INVALID_REQUEST"
	}

	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)

	str, _ := json.Marshal(resp)
	fmt.Fprintf(w, string(str))
}
