/*
 * Power control block
 *
 * This API was created to monitor states of Power Control Block and send some commands to it.
 *
 * API version: 1.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"encoding/json"
	"fmt"
	"net/http"

	"../control"
)

func GetPwrCfg(w http.ResponseWriter, r *http.Request) {
	var res RespPowercfgResults
	var resp RespPowercfg

	cfg := control.GetPowerConfig()
	res.PowerStat = cfg.PowerStat
	res.BatLevel = cfg.BatLevel
	res.Pc = cfg.Pc
	res.Wifi = cfg.Wifi
	res.Relay1 = cfg.Relay[0]
	res.Relay2 = cfg.Relay[1]
	res.Modem1 = cfg.Modem[0]
	res.Modem2 = cfg.Modem[1]

	resp.Results = &res
	resp.Status = "OK"

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)

	str, _ := json.Marshal(resp)
	fmt.Fprintf(w, string(str))
}

func SetPwrCfg(w http.ResponseWriter, r *http.Request) {
	var res RespPowercfgResults
	var resp RespPowercfg

	newCfg := control.GetConfigFile()

	for k, v := range r.URL.Query() {
		fmt.Printf("%s: %s\n", k, v)
		if k == "pc" {
			if v[0] == "true" {
				newCfg.Power.Pc = true
			} else {
				newCfg.Power.Pc = false
			}
		} else if k == "wifi" {
			if v[0] == "true" {
				newCfg.Power.Wifi = true
			} else {
				newCfg.Power.Wifi = false
			}
		} else if k == "relay1" {
			if v[0] == "true" {
				newCfg.Power.Relay[0] = true
			} else {
				newCfg.Power.Relay[0] = false
			}
		} else if k == "relay2" {
			if v[0] == "true" {
				newCfg.Power.Relay[1] = true
			} else {
				newCfg.Power.Relay[1] = false
			}
		} else if k == "modem1" {
			if v[0] == "true" {
				newCfg.Power.Modem[0] = true
			} else {
				newCfg.Power.Modem[0] = false
			}
		} else if k == "modem2" {
			if v[0] == "true" {
				newCfg.Power.Modem[1] = true
			} else {
				newCfg.Power.Modem[1] = false
			}
		} else if k == "simnum1" {
			tmp := []byte(v[0])
			newCfg.SimNum[0] = tmp[0] - '0'
		} else if k == "simnum2" {
			tmp := []byte(v[0])
			newCfg.SimNum[1] = tmp[0] - '0'
		}
	}

	control.SendConfig(newCfg)

	status, ret := waitForResponce()
	if ret == true {
		cfg := control.GetPowerConfig()
		res.PowerStat = cfg.PowerStat
		res.BatLevel = cfg.BatLevel
		res.Pc = cfg.Pc
		res.Wifi = cfg.Wifi
		res.Relay1 = cfg.Relay[0]
		res.Relay2 = cfg.Relay[1]
		res.Modem1 = cfg.Modem[0]
		res.Modem2 = cfg.Modem[1]
		res.SimNum1 = control.ModemSt[0].SimNum
		res.SimNum1 = control.ModemSt[1].SimNum

		resp.Results = &res
	}
	resp.Status = status

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)

	str, _ := json.Marshal(resp)
	fmt.Fprintf(w, string(str))
}

func SetPwrModemByID(w http.ResponseWriter, r *http.Request) {
	var res RespStateResults
	var resp RespState

	idx, state := parseNumberState(r)

	control.SendObjectPwr(control.OBJECT_MODEM, idx, state)
	status, ret := waitForResponce()
	if ret == true {
		res.Number = idx
		res.State = state
		resp.Results = &res
		control.PowerSt.Modem[idx] = state
	}
	resp.Status = status

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)

	str, _ := json.Marshal(resp)
	fmt.Fprintf(w, string(str))
}

func SetPwrPC(w http.ResponseWriter, r *http.Request) {
	var res RespStateResults
	var resp RespState

	_, state := parseNumberState(r)

	control.SendObjectPwr(control.OBJECT_PC, 0, state)
	status, ret := waitForResponce()
	if ret == true {
		res.Number = 0
		res.State = state
		resp.Results = &res
		control.PowerSt.Pc = state
	}
	resp.Status = status

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)

	str, _ := json.Marshal(resp)
	fmt.Fprintf(w, string(str))
}

func SetPwrRelayByID(w http.ResponseWriter, r *http.Request) {
	var res RespStateResults
	var resp RespState

	idx, state := parseNumberState(r)

	control.SendObjectPwr(control.OBJECT_RELAY, idx, state)
	status, ret := waitForResponce()
	if ret == true {
		res.Number = idx
		res.State = state
		resp.Results = &res
		control.PowerSt.Relay[idx] = state
	}
	resp.Status = status

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)

	str, _ := json.Marshal(resp)
	fmt.Fprintf(w, string(str))
}

func SetPwrWiFi(w http.ResponseWriter, r *http.Request) {
	var res RespStateResults
	var resp RespState

	_, state := parseNumberState(r)

	control.SendObjectPwr(control.OBJECT_WIFI, 0, state)
	status, ret := waitForResponce()
	if ret == true {
		res.Number = 0
		res.State = state
		resp.Results = &res
		control.PowerSt.Wifi = state
	}
	resp.Status = status

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)

	str, _ := json.Marshal(resp)
	fmt.Fprintf(w, string(str))
}

func SetWaitmode(w http.ResponseWriter, r *http.Request) {
	var res RespStateResults
	var resp RespState

	_, state := parseNumberState(r)

	control.SendCommand(control.CMD_PC_WAITMODE, state)
	status, ret := waitForResponce()
	if ret == true {
		res.Number = 0
		res.State = state
		resp.Results = &res
		control.PowerSt.Waitmode = state
	}
	resp.Status = status

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)

	str, _ := json.Marshal(resp)
	fmt.Fprintf(w, string(str))
}
