openapi: 3.0.0
info:
  title: Power control block
  description: This API was created to monitor states of Power Control Block and send
    some commands to it.
  version: "1.0"
servers:
- url: http://localhost:8080
  description: Localhost server
paths:
  /power:
    get:
      tags:
      - Power
      summary: Запрос «Состояния модулей питания»
      operationId: getPwrCfg
      responses:
        "200":
          description: Структура, содержащая состояния питания
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp_powercfg'
    put:
      tags:
      - Power
      summary: Команда «Установка заданной конфигурации»
      operationId: setPwrCfg
      parameters:
      - name: pc
        in: query
        description: PC power control
        required: true
        style: form
        explode: true
        schema:
          type: boolean
      - name: wifi
        in: query
        description: WIFI power control
        required: true
        style: form
        explode: true
        schema:
          type: boolean
      - name: relay1
        in: query
        description: Relay 1 power control
        required: true
        style: form
        explode: true
        schema:
          type: boolean
      - name: relay2
        in: query
        description: Relay 2 power control
        required: true
        style: form
        explode: true
        schema:
          type: boolean
      - name: modem1
        in: query
        description: Modem 1 power control
        required: true
        style: form
        explode: true
        schema:
          type: boolean
      - name: modem2
        in: query
        description: Modem 2 power control
        required: true
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: Структура, содержащая состояния питания
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp_powercfg'
  /power/battery:
    get:
      tags:
      - Power
      summary: Запрос «Состояние батареи»
      operationId: getPwrBat
      responses:
        "200":
          description: Состояние батарии
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp_battery'
  /power/relay:
    get:
      tags:
      - Power
      summary: Запрос «Состояния реле»
      operationId: getPwrRelayByID
      parameters:
      - name: number
        in: query
        description: Just number of sth. 1, 2, 3, etc...
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: uint8
      responses:
        "200":
          description: Состояние реле
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp_state'
    put:
      tags:
      - Power
      summary: Команда «Управление реле»
      operationId: setPwrRelayByID
      parameters:
      - name: number
        in: query
        description: Just number of sth. 1, 2, 3, etc...
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: uint8
      - name: state
        in: query
        description: True if you want to turn power on, false otherwise
        required: true
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: Состояние реле
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp_state'
  /power/wifi:
    get:
      tags:
      - Power
      summary: Запрос «Состояние модуля питания WiFi»
      operationId: getPwrWiFi
      responses:
        "200":
          description: Состояние модуля питания WiFi
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp_state'
    put:
      tags:
      - Power
      summary: Команда «Управление модулем питания WiFi»
      operationId: setPwrWiFi
      parameters:
      - name: state
        in: query
        description: True if you want to turn power on, false otherwise
        required: true
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: Состояние модуля питания WiFi
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp_state'
  /power/pc:
    get:
      tags:
      - Power
      summary: Запрос «Состояние модуля питания мини ЭВМ»
      operationId: getPwrPC
      responses:
        "200":
          description: Состояние модуля питания мини ЭВМ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp_state'
    put:
      tags:
      - Power
      summary: Команда «Управление модулем питания мини ЭВМ»
      operationId: setPwrPC
      parameters:
      - name: state
        in: query
        description: True if you want to turn power on, false otherwise
        required: true
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: Состояние модуля питания мини ЭВМ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp_state'
  /power/modem:
    get:
      tags:
      - Power
      summary: Запрос «Состояние модулей питания БС»
      operationId: getPwrModemByID
      parameters:
      - name: number
        in: query
        description: Just number of sth. 1, 2, 3, etc...
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: uint8
      responses:
        "200":
          description: Состояние модуля питания модема
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp_state'
    put:
      tags:
      - Power
      summary: Команда «Вкл/Откл питание БС Х»
      operationId: setPwrModemByID
      parameters:
      - name: number
        in: query
        description: Just number of sth. 1, 2, 3, etc...
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: uint8
      - name: state
        in: query
        description: True if you want to turn power on, false otherwise
        required: true
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: Состояние модуля питания модема
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp_state'
  /power/waitmode:
    put:
      tags:
      - Power
      summary: Команда «Войти в ждущий режим»
      operationId: setWaitmode
      parameters:
      - name: state
        in: query
        description: True if you want to turn power on, false otherwise
        required: true
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: Подтверждение перехода в спящий режим
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp_state'
  /modem/state:
    get:
      tags:
      - Modem
      summary: Запрос «Статус работы БС»
      operationId: getModemStByID
      parameters:
      - name: number
        in: query
        description: Just number of sth. 1, 2, 3, etc...
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: uint8
      responses:
        "200":
          description: Состояние модема
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp_modemstate'
  /modem/state/flymode:
    get:
      tags:
      - Modem
      summary: Запрос «Авиарежим БС»
      operationId: getModemFlyByID
      parameters:
      - name: number
        in: query
        description: Just number of sth. 1, 2, 3, etc...
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: uint8
      responses:
        "200":
          description: Состояние авиарежима модема
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp_state'
    put:
      tags:
      - Modem
      summary: Команда «Вкл/Откл авиарежим БС Х»
      operationId: setModemFlyByID
      parameters:
      - name: number
        in: query
        description: Just number of sth. 1, 2, 3, etc...
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: uint8
      - name: state
        in: query
        description: True if you want to turn power on, false otherwise
        required: true
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: Состояние авиарежима модема
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp_state'
  /modem/state/imei:
    get:
      tags:
      - Modem
      summary: Запрос «Текущий IMEI»
      operationId: getModemImeiByID
      parameters:
      - name: number
        in: query
        description: Just number of sth. 1, 2, 3, etc...
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: uint8
      responses:
        "200":
          description: Установленный параметр IMEI модема
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp_imei'
    put:
      tags:
      - Modem
      summary: Команда «Установить новый IMEI»
      operationId: setModemImeiByID
      parameters:
      - name: number
        in: query
        description: Just number of sth. 1, 2, 3, etc...
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: uint8
      - name: imei
        in: query
        description: IMEI of modem
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Установленный параметр IMEI модема
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp_imei'
  /modem/state/sim:
    get:
      tags:
      - Modem
      summary: Запрос «Установленная сим-карта»
      operationId: getModemSimByID
      parameters:
      - name: number
        in: query
        description: Just number of sth. 1, 2, 3, etc...
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: uint8
      responses:
        "200":
          description: Номер выбранной сим-карты модема
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp_sim'
    put:
      tags:
      - Modem
      summary: Команда «Выбрать сим-карту Х на блоке У»
      operationId: setModemSimByID
      parameters:
      - name: number
        in: query
        description: Just number of sth. 1, 2, 3, etc...
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: uint8
      - name: sim_num
        in: query
        description: Number of current sim-card in bank
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: uint8
      responses:
        "200":
          description: Номер выбранной сим-карты модема
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp_sim'
  /modem/conn:
    get:
      tags:
      - Modem
      summary: Запрос «Статус сети»
      operationId: getModemConnByID
      parameters:
      - name: number
        in: query
        description: Just number of sth. 1, 2, 3, etc...
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: uint8
      responses:
        "200":
          description: Статус соединения модема
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp_modemconn'
  /sms/lock:
    put:
      tags:
      - Sms
      summary: Команда «Блокировка входящих сообщений»
      operationId: setSmsLock
      parameters:
      - name: state
        in: query
        description: True if you want to turn power on, false otherwise
        required: true
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: Подтверждение блокировки обработки СМС
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp_state'
  /sms/send:
    put:
      tags:
      - Sms
      summary: Команда «Отправить СМС сообщение»
      operationId: setSendSms
      parameters:
      - name: number
        in: query
        description: Just number of sth. 1, 2, 3, etc...
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: uint8
      - name: phone
        in: query
        description: Current phone number
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: message
        in: query
        description: Some text message
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Подтверждение отправки СМС сообщения
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp_sms'
  /sms/unknown:
    get:
      tags:
      - Sms
      summary: Запрос «Неопознанные сообщения»
      operationId: getSmsUnknown
      responses:
        "200":
          description: Прочитанное СМС сообщение
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp_sms'
  /buttons/lock:
    put:
      tags:
      - Buttons
      summary: Команда «Блокировка обработки кнопок»
      operationId: setButtonsLock
      parameters:
      - name: state
        in: query
        description: True if you want to turn power on, false otherwise
        required: true
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: Подтверждение блокировки обработки кнопок выбора сим-карт
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp_state'
  /files/config:
    get:
      tags:
      - Files
      summary: Запрос «Файл конфигурации»
      operationId: getFileConfig
      responses:
        "200":
          description: Файл конфигурации блока управления
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp_filecfg'
    put:
      tags:
      - Files
      summary: Команда «Задать файл конфигурации»
      operationId: setFileConfig
      requestBody:
        $ref: '#/components/requestBodies/filecfg'
      responses:
        "200":
          description: Файл конфигурации блока управления
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp_filecfg'
  /files/phones:
    get:
      tags:
      - Files
      summary: Запрос «Разрешенные комбинации SIM+IMEI»
      operationId: getFilePhones
      responses:
        "200":
          description: Файл с разрешенными номерами
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp_filephones'
    put:
      tags:
      - Files
      summary: Команда «Задать файл номеров»
      operationId: setFileNPhones
      requestBody:
        $ref: '#/components/requestBodies/filephone'
      responses:
        "200":
          description: Файл с разрешенными номерами
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp_filephones'
components:
  schemas:
    resp_powercfg:
      title: ResponsePower
      type: object
      properties:
        results:
          $ref: '#/components/schemas/resp_powercfg_results'
        status:
          type: string
          description: "Three possible statuses:\n \n* `OK`: No errors occurred. \n\
            * `INVALID_REQUEST`: Some parameters are missing or invalid. \n* `UNKNOWN_ERROR`:\
            \ The request could not be processed due to a server error. The request\
            \ may succeed if you try again."
          example: OK
      example:
        results:
          wifi: true
          pc: true
          modem2: true
          power_stat: true
          relay1: true
          relay2: true
          modem1: true
          bat_level: 47
        status: OK
    resp_modemstate:
      title: ResponseModemState
      type: object
      properties:
        results:
          $ref: '#/components/schemas/resp_modemstate_results'
        status:
          type: string
          description: "Three possible statuses:\n \n* `OK`: No errors occurred. \n\
            * `INVALID_REQUEST`: Some parameters are missing or invalid. \n* `UNKNOWN_ERROR`:\
            \ The request could not be processed due to a server error. The request\
            \ may succeed if you try again."
          example: OK
      example:
        results:
          sim_id: "3889654512325478527"
          flymode: true
          phone: 79217773335
          sim_num: 2
          imei: 35-419002-389644-3
        status: OK
    resp_modemconn:
      title: ResponseModemConn
      type: object
      properties:
        results:
          $ref: '#/components/schemas/resp_modemconn_results'
        status:
          type: string
          description: "Three possible statuses:\n \n* `OK`: No errors occurred. \n\
            * `INVALID_REQUEST`: Some parameters are missing or invalid. \n* `UNKNOWN_ERROR`:\
            \ The request could not be processed due to a server error. The request\
            \ may succeed if you try again."
          example: OK
      example:
        results:
          base_id: 257-01-114-1384
          signal: high
          operator: Megafon
        status: OK
    resp_sms:
      title: ResponseSmsRecv
      type: object
      properties:
        results:
          $ref: '#/components/schemas/resp_sms_results'
        status:
          type: string
          description: "Three possible statuses:\n \n* `OK`: No errors occurred. \n\
            * `INVALID_REQUEST`: Some parameters are missing or invalid. \n* `UNKNOWN_ERROR`:\
            \ The request could not be processed due to a server error. The request\
            \ may succeed if you try again."
          example: OK
      example:
        results:
          number: 1
          phone: "79217773335"
          message: Hello user
        status: OK
    resp_filecfg:
      title: ResponseConfigFile
      type: object
      properties:
        results:
          type: string
          description: Config file
          example: "15312001100000"
        status:
          type: string
          description: "Three possible statuses:\n \n* `OK`: No errors occurred. \n\
            * `INVALID_REQUEST`: Some parameters are missing or invalid. \n* `UNKNOWN_ERROR`:\
            \ The request could not be processed due to a server error. The request\
            \ may succeed if you try again."
          example: OK
      example:
        results: "15312001100000"
        status: OK
    resp_filephones:
      title: ResponsePhonesFile
      type: object
      properties:
        results:
          type: array
          description: Phones file
          items:
            type: string
        status:
          type: string
          description: "Three possible statuses:\n \n* `OK`: No errors occurred. \n\
            * `INVALID_REQUEST`: Some parameters are missing or invalid. \n* `UNKNOWN_ERROR`:\
            \ The request could not be processed due to a server error. The request\
            \ may succeed if you try again."
          example: OK
      example:
        results:
        - results
        - results
        status: OK
    resp_state:
      title: ResponseState
      type: object
      properties:
        results:
          $ref: '#/components/schemas/resp_state_results'
        status:
          type: string
          description: "Three possible statuses:\n \n* `OK`: No errors occurred. \n\
            * `INVALID_REQUEST`: Some parameters are missing or invalid. \n* `UNKNOWN_ERROR`:\
            \ The request could not be processed due to a server error. The request\
            \ may succeed if you try again."
          example: OK
      example:
        results:
          number: 1
          state: true
        status: OK
    resp_battery:
      title: ResponseBattery
      type: object
      properties:
        results:
          type: integer
          description: Battery level percent
          format: uint8
          example: 52
        status:
          type: string
          description: "Three possible statuses:\n \n* `OK`: No errors occurred. \n\
            * `INVALID_REQUEST`: Some parameters are missing or invalid. \n* `UNKNOWN_ERROR`:\
            \ The request could not be processed due to a server error. The request\
            \ may succeed if you try again."
          example: OK
      example:
        results: 52
        status: OK
    resp_imei:
      title: ResponseIMEI
      type: object
      properties:
        results:
          $ref: '#/components/schemas/resp_imei_results'
        status:
          type: string
          description: "Three possible statuses:\n \n* `OK`: No errors occurred. \n\
            * `INVALID_REQUEST`: Some parameters are missing or invalid. \n* `UNKNOWN_ERROR`:\
            \ The request could not be processed due to a server error. The request\
            \ may succeed if you try again."
          example: OK
      example:
        results:
          number: 1
          imei: 35-419002-389644-3
        status: OK
    resp_sim:
      title: ResponseSIMNum
      type: object
      properties:
        results:
          $ref: '#/components/schemas/resp_sim_results'
        status:
          type: string
          description: "Three possible statuses:\n \n* `OK`: No errors occurred. \n\
            * `INVALID_REQUEST`: Some parameters are missing or invalid. \n* `UNKNOWN_ERROR`:\
            \ The request could not be processed due to a server error. The request\
            \ may succeed if you try again."
          example: OK
      example:
        results:
          number: 1
          sim_num: 2
        status: OK
    resp_powercfg_results:
      type: object
      properties:
        power_stat:
          type: boolean
          description: Static power or battery
          example: true
        bat_level:
          type: integer
          description: Battery level
          format: uint8
          example: 47
        pc:
          type: boolean
          description: PC power control
          example: true
        wifi:
          type: boolean
          description: Wifi power control
          example: true
        relay1:
          type: boolean
          description: Relay 1 power control
          example: true
        relay2:
          type: boolean
          description: Relay 2 power control
          example: true
        modem1:
          type: boolean
          description: Modem 1 power control
          example: true
        modem2:
          type: boolean
          description: Modem 2 power control
          example: true
      example:
        wifi: true
        pc: true
        modem2: true
        power_stat: true
        relay1: true
        relay2: true
        modem1: true
        bat_level: 47
    resp_modemstate_results:
      type: object
      properties:
        flymode:
          type: boolean
          description: Flightmode state
          example: true
        sim_num:
          type: integer
          description: Number of current sim-card in bank
          format: uint8
          example: 2
        sim_id:
          type: string
          description: ICCID of current sim-card
          example: "3889654512325478527"
        imei:
          type: string
          description: IMEI of modem
          example: 35-419002-389644-3
        phone:
          type: string
          description: Current phone number
          example: "79217773335"
      example:
        sim_id: "3889654512325478527"
        flymode: true
        phone: 79217773335
        sim_num: 2
        imei: 35-419002-389644-3
    resp_modemconn_results:
      type: object
      properties:
        operator:
          type: string
          description: Current operator
          example: Megafon
        base_id:
          type: string
          description: ID of current base station
          example: 257-01-114-1384
        signal:
          type: string
          description: Signal level
          example: high
      example:
        base_id: 257-01-114-1384
        signal: high
        operator: Megafon
    resp_sms_results:
      type: object
      properties:
        number:
          type: integer
          description: Number
          format: uint8
          example: 1
        phone:
          type: string
          description: Phone number
          example: "79217773335"
        message:
          type: string
          description: Some text message
          example: Hello user
      example:
        number: 1
        phone: "79217773335"
        message: Hello user
    resp_state_results:
      type: object
      properties:
        number:
          type: integer
          description: Number
          format: uint8
          example: 1
        state:
          type: boolean
          description: State
          example: true
      example:
        number: 1
        state: true
    resp_imei_results:
      type: object
      properties:
        number:
          type: integer
          description: Number
          format: uint8
          example: 1
        imei:
          type: string
          description: IMEI
          example: 35-419002-389644-3
      example:
        number: 1
        imei: 35-419002-389644-3
    resp_sim_results:
      type: object
      properties:
        number:
          type: integer
          description: Number
          format: uint8
          example: 1
        sim_num:
          type: integer
          description: sim num
          format: uint8
          example: 2
      example:
        number: 1
        sim_num: 2
  parameters:
    state:
      name: state
      in: query
      description: True if you want to turn power on, false otherwise
      required: true
      style: form
      explode: true
      schema:
        type: boolean
    number:
      name: number
      in: query
      description: Just number of sth. 1, 2, 3, etc...
      required: true
      style: form
      explode: true
      schema:
        type: integer
        format: uint8
    strval:
      name: strval
      in: query
      description: Some string value
      required: true
      style: form
      explode: true
      schema:
        type: string
    message:
      name: message
      in: query
      description: Some text message
      required: true
      style: form
      explode: true
      schema:
        type: string
    pc:
      name: pc
      in: query
      description: PC power control
      required: true
      style: form
      explode: true
      schema:
        type: boolean
    wifi:
      name: wifi
      in: query
      description: WIFI power control
      required: true
      style: form
      explode: true
      schema:
        type: boolean
    rel1:
      name: relay1
      in: query
      description: Relay 1 power control
      required: true
      style: form
      explode: true
      schema:
        type: boolean
    rel2:
      name: relay2
      in: query
      description: Relay 2 power control
      required: true
      style: form
      explode: true
      schema:
        type: boolean
    mod1:
      name: modem1
      in: query
      description: Modem 1 power control
      required: true
      style: form
      explode: true
      schema:
        type: boolean
    mod2:
      name: modem2
      in: query
      description: Modem 2 power control
      required: true
      style: form
      explode: true
      schema:
        type: boolean
    flymode:
      name: flymode
      in: query
      description: Flightmode state
      required: true
      style: form
      explode: true
      schema:
        type: boolean
    sim_num:
      name: sim_num
      in: query
      description: Number of current sim-card in bank
      required: true
      style: form
      explode: true
      schema:
        type: integer
        format: uint8
    sim_id:
      name: sim_id
      in: query
      description: ICCID of current sim-card
      required: true
      style: form
      explode: true
      schema:
        type: string
    imei:
      name: imei
      in: query
      description: IMEI of modem
      required: true
      style: form
      explode: true
      schema:
        type: string
    phone:
      name: phone
      in: query
      description: Current phone number
      required: true
      style: form
      explode: true
      schema:
        type: string
    file:
      name: file
      in: header
      description: Some text file
      required: true
      style: simple
      explode: false
      schema:
        type: array
        items:
          type: string
  requestBodies:
    filecfg:
      description: The config file
      content:
        text/plain:
          schema:
            type: string
      required: true
    filephone:
      description: The phone numbers file
      content:
        text/plain:
          schema:
            type: array
            items:
              type: string
      required: true
